package email

import (
	"api-gateway/config"
	"fmt"
	"net/smtp"
)

// Mailer —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
type Mailer struct {
	From     string
	Password string
	Host     string
	Port     string
}

// NewMailer —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π Mailer –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func NewMailer(cfg *config.Config) *Mailer {
	return &Mailer{
		From:     cfg.EmailFrom,
		Password: cfg.EmailPassword,
		Host:     cfg.SMTPHost,
		Port:     cfg.SMTPPort,
	}
}

// SendWelcomeEmail –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
func (m *Mailer) SendWelcomeEmail(toEmail, fullName string) error {
	auth := smtp.PlainAuth("", m.From, m.Password, m.Host)

	subject := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bookstore!"
	body := fmt.Sprintf(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.

–° –ª—é–±–æ–≤—å—é, –∫–æ–º–∞–Ω–¥–∞ Bookstore üíô
`, fullName)

	msg := []byte("Subject: " + subject + "\r\n" +
		"From: Bookstore <" + m.From + ">\r\n" +
		"To: " + toEmail + "\r\n" +
		"Content-Type: text/plain; charset=\"utf-8\"\r\n\r\n" +
		body)

	return smtp.SendMail(m.Host+":"+m.Port, auth, m.From, []string{toEmail}, msg)
}
